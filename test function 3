{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import heapq\n",
    "import math\n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "graph = {\n",
    "    1: {2: 5, 3: 1},\n",
    "    2: {1: 5, 3: 2, 4: 1},\n",
    "    3: {1: 1, 2: 2, 4: 4, 5: 8},\n",
    "    4: {2: 1, 3: 4, 5: 3, 6: 6},\n",
    "    5: {3: 8, 4: 3},\n",
    "    6: {4: 6},\n",
    "    7: {8: 9},\n",
    "    8: {7: 9}\n",
    "}\n",
    "\n",
    "edges = [[1, 2], [1, 3], [2,3], [2, 4], [3, 4], [3, 5], [4, 5], [4, 6], [7, 8]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def init_distance(graph, s):\n",
    "    distance = {s: 0}\n",
    "    for vertex in graph:\n",
    "        if vertex != s:\n",
    "            distance[vertex] = math.inf\n",
    "\n",
    "    return distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dijkstra(graph, start_node, end_node):\n",
    "    pqueue = []\n",
    "    heapq.heappush(pqueue, (0, start_node))\n",
    "    seen = set()\n",
    "    parent = {start_node: None}\n",
    "    distance = init_distance(graph, start_node)\n",
    "\n",
    "    while len(pqueue) > 0:\n",
    "        pair = heapq.heappop(pqueue)\n",
    "        dist = pair[0]\n",
    "        vertex = pair[1]\n",
    "        if vertex == end_node:\n",
    "            break\n",
    "        seen.add(vertex)\n",
    "\n",
    "        nodes = graph[vertex].keys()\n",
    "        for node in nodes:\n",
    "            if node not in seen:\n",
    "                dist_new = dist + graph[vertex][node]\n",
    "                if dist_new < distance[node]:\n",
    "                    heapq.heappush(pqueue, (dist_new, node))\n",
    "                    parent[node] = vertex\n",
    "                    distance[node] = dist_new\n",
    "    return parent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def construct_path(parent, start_node, end_node):\n",
    "    ptr_node = end_node\n",
    "    path = []\n",
    "    while ptr_node != start_node:\n",
    "        path.append(ptr_node)\n",
    "        ptr_node = parent[ptr_node]\n",
    "\n",
    "    # path.append(start_node)\n",
    "    reversed_path = list(reversed(path))\n",
    "\n",
    "    return reversed_path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def union_find(nodes, edges):\n",
    "    parent = [0] * (len(nodes)+1)\n",
    "    for node in nodes:\n",
    "        parent[node] = node\n",
    "    for edge in edges:\n",
    "        fromId = edge[0]\n",
    "        toId = edge[1]\n",
    "        parent[toId] = fromId\n",
    "    for node in nodes:\n",
    "        while True:\n",
    "            root_node = parent[node]\n",
    "            if root_node != parent[root_node]:\n",
    "                parent[node] = parent[root_node]\n",
    "            else:\n",
    "                break\n",
    "    res = {}\n",
    "    for i, f in enumerate(parent):\n",
    "        res[f] = []\n",
    "    for i, f in enumerate(parent):\n",
    "        res[f].append(i)\n",
    "\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def examine_connection(graph, H, node_list):\n",
    "    nodes = graph.keys()\n",
    "    groups = union_find(nodes, edges)\n",
    "    node_list.append(H)\n",
    "    examine_set = set(node_list)\n",
    "    node_list.remove(H)\n",
    "    for key in groups.keys():\n",
    "        group = groups[key]\n",
    "        group_set = set(group)\n",
    "        if group_set >= examine_set:\n",
    "            return True\n",
    "\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def shortest_ordered_route(graph, H, node_list):\n",
    "    flag = examine_connection(graph, H, node_list)\n",
    "    if flag is False:\n",
    "        return \"Not Possible\"\n",
    "\n",
    "    first_node = node_list[0]\n",
    "    parent = dijkstra(graph, H, first_node)\n",
    "    initial_path = construct_path(parent, H, first_node)\n",
    "    initial_path.insert(0, H)\n",
    "    final_path = []\n",
    "    final_path.extend(initial_path)\n",
    "    node_list.remove(first_node)\n",
    "    # return initial_path\n",
    "\n",
    "    for node in node_list:\n",
    "        parent = dijkstra(graph, first_node, node)\n",
    "        tmp_path = construct_path(parent, first_node, node)\n",
    "        final_path.extend(tmp_path)\n",
    "        first_node = node\n",
    "\n",
    "    return final_path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func_3(graph):\n",
    "    H_input = input(\"Please input node you want to begin in: \")\n",
    "    H = int(H_input)\n",
    "    node_list_input = input(\"Please input the series of nodes you want to visit (separate them by space): \")\n",
    "    node_list = node_list_input.split(' ')\n",
    "    node_list = list(map(int, node_list))\n",
    "    sp = shortest_ordered_route(graph, H, node_list)\n",
    "    print(\"The shortest route is:\")\n",
    "    print(sp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please input node you want to begin in: 1\n",
      "Please input the series of nodes you want to visit (separate them by space): 2 3 4\n",
      "The shortest route is:\n",
      "[1, 3, 2, 3, 2, 4]\n"
     ]
    }
   ],
   "source": [
    "func_3(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "G = nx.Graph()\n",
    "nodes = list(graph.keys())\n",
    "G.add_nodes_from(nodes)\n",
    "G.add_edges_from(edges)\n",
    "\n",
    "# G.number_of_nodes()\n",
    "# G.number_of_edges()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx.draw(G, with_labels = True, font_weight='bold')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
